// Code generated by go-bindata.
// sources:
// sql/query1.sql
// sql/query2.sql
// sql/query3.sql
// sql/task1.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlQuery1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcc\x4d\x6a\x83\x40\x18\xc6\xf1\xfd\x9c\xe2\xdd\xa9\x0b\x7b\x81\xe2\xb6\xd0\x4d\xaf\x20\x56\x5f\x71\xc0\x19\x65\x1c\x28\xdd\x89\xa5\xd0\x6b\xf4\x06\x4a\x08\x4c\x12\x92\x33\x3c\xef\x8d\x42\x3e\x20\x1f\xdb\xe7\xf9\xf3\x4b\x53\xc2\xbf\x4c\x98\x65\x94\x3f\x04\x6c\x48\x46\xcc\x58\x70\x90\x09\x7b\x04\x6c\x09\x8b\xfc\xc8\x2f\x56\x98\xb1\x93\x09\x6b\x19\x11\x10\xd4\xc0\x2d\x97\x9e\x2a\x3d\x78\x6d\x4b\x4f\x6c\xfa\xb6\xfb\x66\x1e\x5e\x6c\x61\x58\xd5\xae\x33\xb7\x4d\x7d\x35\xec\xf8\xae\xa9\x0a\xcf\x79\x57\xe7\x9f\xda\xf9\x86\x32\x8a\x15\x11\xd1\xd5\x34\xda\xc6\x0f\x41\x72\x7e\x9f\xc8\xd3\x74\x61\x2b\xee\x0b\xe7\x0d\x5b\x4f\x19\x45\x6f\xef\x1f\x91\x4a\x5e\xd5\x31\x00\x00\xff\xff\x28\x5c\x04\xfe\xdb\x00\x00\x00")

func sqlQuery1SqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlQuery1Sql,
		"sql/query1.sql",
	)
}

func sqlQuery1Sql() (*asset, error) {
	bytes, err := sqlQuery1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/query1.sql", size: 219, mode: os.FileMode(436), modTime: time.Unix(1702992234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlQuery2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xcf\x4a\xf3\x40\x14\xc5\xf7\xf3\x14\x67\x97\x16\xbe\x94\x2f\x71\x29\x79\x16\x09\xe6\x8a\x23\x9d\x49\x69\x02\xd2\x5d\x6c\x11\x5c\x08\x3e\x81\xef\x10\xff\x14\xa2\x90\xfa\x0a\xe7\xbe\x91\xcc\x44\x6c\x37\x6e\x86\xb9\xe7\x9c\xfb\x3b\x37\x4d\xc1\x67\xf6\xfc\xd0\x2d\x07\xe8\x1d\x0f\xba\xd5\x4e\x77\x7c\xe7\xc8\x81\x9f\xec\xff\x81\x5f\xda\x71\xd0\x07\xee\xa3\xba\xe7\x1b\x0f\x21\x1a\x3f\x41\xd2\x27\x70\x64\x0f\xed\xd8\xf3\x25\x22\x76\xd3\x30\xea\x63\xd8\x03\x5f\x43\x5e\xef\x4d\x23\x4b\xb9\x6c\x21\x6e\xb5\xac\x37\x22\xcd\xc2\x97\x4e\xcc\xd5\xba\x76\x47\x0d\x37\xb5\xf5\x68\xad\x93\xc6\xd4\xfe\x57\xbf\xb0\x15\x8a\x93\x4d\x5b\x99\xdb\x6b\x59\x0b\xaa\xb2\x15\x14\x48\xf2\xff\x79\x9e\x66\x79\x9a\x9d\x25\x28\x7d\x35\x11\x16\xe1\x45\x81\x99\x01\x80\x9f\x7a\x67\xfd\xec\xe8\xce\xa3\x15\x6f\x98\x4a\xc3\xf8\x27\x3a\xba\x27\xf8\xcd\x2a\x26\xb2\xc4\xcc\xcf\xcd\x77\x00\x00\x00\xff\xff\xde\x54\x39\x21\x4f\x01\x00\x00")

func sqlQuery2SqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlQuery2Sql,
		"sql/query2.sql",
	)
}

func sqlQuery2Sql() (*asset, error) {
	bytes, err := sqlQuery2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/query2.sql", size: 335, mode: os.FileMode(436), modTime: time.Unix(1702992460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlQuery3Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4d\x4a\xc3\x50\x14\x85\xe7\x77\x15\x67\x96\x16\x4c\x31\x71\x28\x59\x8b\x04\x73\xc5\x48\x5f\x52\x9a\x80\x76\x96\xd6\x89\xe0\xc0\xad\x14\x34\x90\xb6\x36\xdd\xc2\xb9\x3b\x92\x97\x16\xdb\x49\x27\x0f\xde\xf9\xf9\xce\x0d\x43\x70\xcf\x35\x37\xb6\x62\x07\x5b\xb2\xb7\x95\x35\xf6\xce\x1f\xee\xd9\x71\xcb\xf5\x0d\xb8\xf5\x2a\x7b\x6b\xec\x93\x1b\xf0\x60\x0d\x3b\xfb\x60\xcb\x9d\x6f\xb4\xfc\x66\xef\xf3\xf6\x05\x1e\xd8\xdb\x92\x3b\xb6\x27\xc0\xaf\x48\xa5\x53\x7d\xac\xa1\x6e\x36\x2d\x17\xaa\xd5\xa4\x48\x9d\xca\xd3\xbc\x74\x67\x0d\x2f\x65\x5e\xa0\xce\x9d\x56\x52\x16\xff\xfa\x43\x9e\x21\xb9\x68\xe6\x99\xbc\x3e\xeb\x5c\x91\xa5\xb5\x22\x41\x10\xdf\xc6\x71\x18\xc5\x61\x74\x17\x20\x2d\xb2\x23\x61\xe2\x5f\x24\x18\x09\x00\x9c\xe6\x5d\xfa\x36\x3a\xbb\xe3\xc1\x1a\x6e\x38\x8e\xfa\xef\x55\xf4\xe0\x5e\xe0\x17\xb3\x21\x11\x05\x32\xbe\x97\xbf\x00\x00\x00\xff\xff\x99\x87\x67\x27\x42\x01\x00\x00")

func sqlQuery3SqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlQuery3Sql,
		"sql/query3.sql",
	)
}

func sqlQuery3Sql() (*asset, error) {
	bytes, err := sqlQuery3SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/query3.sql", size: 322, mode: os.FileMode(436), modTime: time.Unix(1702992496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlTask1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4f\x6f\xe2\x46\x14\xbf\xcf\xa7\x78\x87\x48\x98\x55\xd8\xda\x0e\x90\xcd\xa2\x54\xa2\xac\x93\x45\xca\x92\x95\x97\x54\xbd\xa1\x59\x7b\xd8\xb8\x80\xcd\x8e\x4d\x52\x6e\x69\x52\xb5\x97\xaa\x51\x7b\xe9\xb1\xea\xa9\x57\xb4\x2d\x6a\x4a\x04\xfd\x0a\xcf\xdf\xa8\x9a\xb1\x01\xf3\x27\xae\x93\x4b\x14\xbf\xf9\xbd\xf7\x7b\x7f\x7e\x33\x3c\x9b\x7b\x7d\x08\xe8\xfb\x2e\x03\xa7\x0d\xec\x1b\xc7\x0f\x7c\x60\xbd\x7e\xd7\x1b\x32\xe6\x83\x45\x7d\x8b\xda\xac\x42\x88\xc5\x19\x0d\xd8\x12\xea\x7a\xc1\x06\x5c\x21\x00\x00\x8e\x0d\xf5\x46\x13\xfa\xdc\xe9\x51\x3e\x84\x0e\x1b\xee\x4a\xbb\x4b\x7b\x0c\xbe\xac\x9a\xb5\xd7\x55\x53\x29\x17\xf3\x91\xd5\xa6\x01\x6b\x79\xed\xd6\x7b\x87\x07\xe7\xf0\xaa\xda\x34\x62\x3b\xeb\x53\x1e\xf4\x98\x1b\x24\x7d\x48\xbe\x42\xc8\xd6\x9c\x03\xa7\x97\x35\x5f\x09\x8d\x72\x9d\xa7\xde\x8a\x92\x8e\xa8\xdb\x1e\x67\xce\x07\x57\x64\x0e\x4a\x02\x91\x07\xce\xda\x8c\x33\xd7\x62\xc9\xa2\x1d\x3b\x51\x8a\xac\x00\x6c\xd6\xa6\x83\x6e\x00\xb5\x33\xd3\x34\x1a\xcd\x56\xa2\x2c\x3a\x14\xd5\x5e\x32\xd6\xd9\xec\x85\x48\x0c\x9a\xf5\x37\x9b\x01\x84\x31\xc6\x0c\xfb\x4c\xf6\xd7\x3a\x67\x56\x07\x14\xf9\x7d\x08\x1a\x78\x1c\xe2\xff\xf5\xa8\x4d\xc4\x71\x7d\xc6\x03\x70\xdc\xc0\xdb\x9c\xd1\x72\x26\x5b\xe6\xb0\x3e\x02\x92\x87\x0b\xda\x1d\x30\x5f\xda\x01\x14\x75\x17\x72\x86\x9a\xdb\x85\x9c\x76\x70\xa0\x15\x34\xbd\xa0\x95\xc5\xd7\x51\xbd\x91\x8b\x8b\x01\x50\x34\x81\xd2\x62\x94\xfe\x10\x4a\x17\x28\x3d\x46\xed\x2d\x51\xf5\x66\x02\xb4\x27\x40\x7b\x31\xa8\xf8\x00\xa8\x28\x40\x45\x61\xd6\x55\x75\xff\x01\x50\x29\x0b\x5d\x39\x0b\xdd\x7e\x16\xba\x17\x59\xe8\x0e\xb2\xd0\x69\x6a\x16\x3e\x4d\xcb\x42\xa8\xe9\x99\x18\xf7\x52\x18\x2b\x84\xf8\xac\xcb\xac\x00\x9e\x41\x9b\x7b\xbd\xa5\xc4\xd6\xb5\xb7\xfd\xbe\x2d\x65\xb7\x71\x33\x96\xb7\x61\xa9\xf9\xad\x12\xd4\x55\x3d\x92\x55\x49\x64\x85\x7f\xe0\x38\xbc\xc6\x4f\x38\x0e\xaf\xf0\x4f\x61\x51\x0f\x5e\xaa\x42\xa5\xda\xb2\xa6\x8c\x6e\x9a\xe8\xa0\xbe\xaa\xbf\x2c\x6c\xa5\x55\xb6\x8c\x6e\x7b\xa5\x14\x36\xd9\x7f\xfc\x3d\xbc\xc2\x31\xfe\x85\xa3\x39\xd3\x7e\x0a\xd3\x76\x97\x62\x1a\x8b\xd4\x02\xfe\x12\x5e\xe3\x2c\xbc\xc2\x29\xde\xe1\x64\xee\x56\x4e\x61\x7a\xd8\xad\xa4\x3e\x89\xad\x94\xd6\xc1\x14\xb7\x17\x29\x6c\xf2\x36\xe0\x6f\x38\xc3\xa9\x6c\xc8\x18\xef\xc3\x1f\xb3\xd7\xf8\xff\xee\xeb\xb5\x16\x9f\xa6\x96\x8c\x6e\xeb\x6a\x29\x3e\x5e\x2d\x19\x5c\xd6\xd5\x52\x7c\x9a\x5a\x32\xba\xa5\x76\xf0\xf1\xf3\x7b\xa4\x7b\xcc\xbe\xf1\xa4\xc9\x97\xab\x42\x48\xa1\x00\xf8\x2b\x8e\x44\x77\xa4\xdf\x18\x34\x28\x40\xf8\x2d\x4e\x70\x84\xf7\xe1\xad\x2c\x66\x14\xde\x42\xf8\x5d\x78\x83\x53\x9c\x84\xdf\xe3\x5d\x78\x9b\xf4\x0b\x7f\xc0\xd1\x4b\x10\x30\xfc\x27\xbc\xc6\x3b\xc0\x89\x68\x03\xe0\x0c\xff\xc5\x19\xfe\x2d\x63\xdf\x83\x38\x98\xe2\x28\x8a\x3d\x93\x89\x4e\x04\xea\x93\x04\xc6\x23\x12\x05\xfc\x8c\x53\x9c\x86\x37\xe1\x4f\x20\xa3\x5f\x87\x37\xa4\x66\x1a\x62\xf9\x38\x35\xc1\x34\xde\x9e\x54\x6b\x06\x1c\x9d\x35\x6a\xcd\xfa\x69\x03\x02\xea\x77\x5a\x9a\x22\x77\x86\x96\xdc\x53\xc4\x9f\x3c\xe1\x2c\x18\x70\xd7\x8f\xd6\x24\x45\x6e\x68\x17\x94\x5b\xe7\x94\xcb\xad\x04\x28\xe7\xce\x05\xed\xb6\xe4\x66\xe2\x0e\x7a\x8c\x3b\x56\x9e\x54\xdf\x91\x9d\x1d\xd9\xea\x57\x46\xed\xa4\x6a\x1a\x71\xdb\x01\x2e\x3d\xde\x11\x0f\xb9\x1f\x50\x1e\xc8\xf6\x55\xe4\xd9\x17\xc6\x71\xbd\x41\x36\x11\x87\xf3\x37\xba\x42\xe4\x69\x94\x0f\x7c\x1c\x30\x3e\x5c\x04\x8d\x67\xc2\x99\xff\x5c\xee\x2b\x60\x7c\xd5\x34\xab\xb5\xa6\x62\xbc\x3d\xad\xbd\x8e\x26\x25\x0e\x93\xc9\xe6\x3f\x2b\xab\x8b\x00\x12\xa1\x2c\x3e\x13\x31\x17\xbf\x59\x71\x64\x59\x67\x61\x2d\x49\xea\xaf\xf4\x61\x25\xce\xea\x2f\x1f\x7c\xed\x39\x6e\xa4\x9a\x15\x94\xe7\x26\x98\x1c\x1b\x0e\x23\xcc\xf3\xe4\xfa\x49\x5d\x3b\xb6\xca\xf9\x1c\x42\x62\x58\xcb\xb3\xf9\xba\xb7\x08\x9f\x17\xe9\xf1\x04\xdf\xe5\x39\xe3\x6c\xa3\x1f\xf0\x39\xe4\x54\xf0\x99\xe5\xb9\xb6\x9f\x8b\x86\xc2\x5c\xbb\x42\x76\x76\xe0\xa4\xda\x38\x3e\xab\x1e\x1b\xd0\xef\xf6\x3f\xf8\x1f\xbb\x15\x42\xde\x19\x27\x46\xad\x09\xcf\xe0\xc8\x3c\x7d\x33\x57\x4f\xf2\x6d\xca\x57\xc8\x7f\x01\x00\x00\xff\xff\xb7\x4a\x2d\x07\x3b\x0c\x00\x00")

func sqlTask1SqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlTask1Sql,
		"sql/task1.sql",
	)
}

func sqlTask1Sql() (*asset, error) {
	bytes, err := sqlTask1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/task1.sql", size: 3131, mode: os.FileMode(436), modTime: time.Unix(1702991890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/query1.sql": sqlQuery1Sql,
	"sql/query2.sql": sqlQuery2Sql,
	"sql/query3.sql": sqlQuery3Sql,
	"sql/task1.sql": sqlTask1Sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"query1.sql": &bintree{sqlQuery1Sql, map[string]*bintree{}},
		"query2.sql": &bintree{sqlQuery2Sql, map[string]*bintree{}},
		"query3.sql": &bintree{sqlQuery3Sql, map[string]*bintree{}},
		"task1.sql": &bintree{sqlTask1Sql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

